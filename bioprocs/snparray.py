from pyppl import proc

"""
@name:
	pSNP6Genotype
@description:
	Call genotypes from GenomeWideSNP_6 CEL file
@input:
	`celfile:file`: the CEL file
@output:
	`outfile:file`: the outfile containing probe name and genotypes
	- format: `<Probe name>\t<genotype>`
	- `<genotype>` = 0: AA, 1: AB, 2: BB
@requires:
	[bioconductor-crlmm](http://bioconductor.org/packages/release/bioc/html/crlmm.html)
"""
pSNP6Genotype = proc ()
pSNP6Genotype.input     = "celfile:file"
pSNP6Genotype.output    = "outfile:file:{{celfile | fn}}.geno.txt"
pSNP6Genotype.defaultSh = "Rscript"
pSNP6Genotype.script    = """
require(oligoClasses)
library(crlmm)

crlmmResult <- crlmm("{{celfile}}", SNRMin=0)
gts = calls(crlmmResult) - 1
#outfile = paste (sep="/", "/data2/junwenwang/panwen/output/TCGA-genotypes/LUAD/gts", paste(basename(args[1]), "gts", sep="."))

write.table(gts, file="{{outfile}}", sep="\\t", row.names=TRUE, quote=FALSE, col.names=FALSE)
"""

"""
@name:
	pGenoToAvInput
@description:
	Convert the genotype called by pSNP6Genotype to [ANNOVAR input file](http://annovar.openbioinformatics.org/en/latest/user-guide/input/#annovar-input-file) using dbSNP identifiers.	
@input:
	`genofile:file`: the genofile generated by pSNP6Genotype, must be sorted by probe names
	`annofile:flie`: the annotation file downloaded from http://www.affymetrix.com/support/technical/annotationfilesmain.affx
		- Could be in .gz format
@output:
	`outfile:file`: the avinput file
@requires:
	[python-read2](https://github.com/pwwang/read2)
"""
pGenoToAvInput = proc()
pGenoToAvInput.input  = "genofile:file, annofile:file"
pGenoToAvInput.output = "outfile:file:{{genofile | fn}}.avinput"
pGenoToAvInput.script = """
#!/usr/bin/env python
from read2 import read2

fout = open ("{{outfile}}", "w")
def rmatch (line1, line2):
	line2 = [item[1:-1] for item in line2]
	if line1[0].startswith ("#"): return -1
	if line2[0].startswith ("#") or line2[0].startswith("Probe Set ID"): return 1
	tomatch = line2[0]
	if line1[0] < tomatch: return -1
	if line1[0] > tomatch: return 1
	return 0
	
def ract (line1, line2):
	line2 = [item[1:-1] for item in line2]
	snp   = line2[1]
	chr   = line2[2]
	pos   = line2[3]
	allA  = line2[8]
	allB  = line2[9]
	comm  = line1
	comm.pop(0)
	fout.write (" ".join([chr,pos,pos,allA, allB, snp, "|".join(comm)]) + "\\n")

r = read2 ("{{genofile}}", "{{annofile}}")
r.delimit ("\\t", ",")
r.match (rmatch)
r.act (ract)
r.run()

fout.close()
"""